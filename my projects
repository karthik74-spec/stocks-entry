import tkinter as tk
from tkinter import messagebox
import yfinance as yf
from yahooquery import search
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt

def resolve_ticker(user_input):
    user_input = user_input.strip()
    if not user_input:
        return None, None
    try:
        stock = yf.Ticker(user_input.upper())
        info = stock.info
        if 'shortName' in info:
            return user_input.upper(), info.get('shortName')
    except:
        pass
    try:
        results = search(user_input)
        for item in results.get('quotes', []):
            if 'symbol' in item and 'shortname' in item:
                return item['symbol'], item['shortname']
    except:
        pass
    return None, None

def fetch_stock_data():
    user_input = entry.get().strip()

    if not user_input:
        messagebox.showwarning("Input Error", "Please enter a stock ticker or company name.")
        return

    try:
        ticker_symbol, name = resolve_ticker(user_input)
        if not ticker_symbol:
            raise ValueError("Unable to find matching stock ticker.")

        stock = yf.Ticker(ticker_symbol)
        hist = stock.history(period="5d", interval="30m")  # More granular

        if hist.empty:
            raise ValueError("No data found for the given ticker.")

        # Fetch price data
        latest_close = hist['Close'].iloc[-1] if not hist['Close'].empty else "N/A"
        latest_close_str = f"{latest_close:.2f}" if isinstance(latest_close, float) else str(latest_close)

        info = stock.info
        current_price = info.get("currentPrice", "N/A")
        previous_close = info.get("previousClose", "N/A")
        fifty_two_week_high = info.get("fiftyTwoWeekHigh", "N/A")
        fifty_two_week_low = info.get("fiftyTwoWeekLow", "N/A")

        result_text = (
            f"Stock: {name} ({ticker_symbol})\n"
            f"Current Price: {current_price}\n"
            f"Previous Close: {previous_close}\n"
            f"52-Week High: {fifty_two_week_high}\n"
            f"52-Week Low: {fifty_two_week_low}\n"
            f"Latest Close (History): {latest_close_str}"
        )
        result_label.config(text=result_text, fg="black")

        # Plot the price graph
        plot_stock_chart(hist, ticker_symbol)

    except Exception as e:
        messagebox.showerror("Error", f"Failed to fetch data.\n\nDetails: {e}")

# üåü Function to plot the graph
def plot_stock_chart(hist, ticker_symbol):
    # Clear previous plot
    for widget in chart_frame.winfo_children():
        widget.destroy()

    fig, ax = plt.subplots(figsize=(5, 3), dpi=100)
    hist['Close'].plot(ax=ax, title=f"{ticker_symbol} Price Trend", legend=False)
    ax.set_ylabel("Price ($)")
    ax.set_xlabel("Time")
    ax.tick_params(axis='x', labelrotation=45)
    fig.tight_layout()

    canvas = FigureCanvasTkAgg(fig, master=chart_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()

# GUI setup
root = tk.Tk()
root.title("StockSentry")
root.geometry("500x600")

title_label = tk.Label(root, text="üìà StockSentry", font=("Helvetica", 18, "bold"))
title_label.pack(pady=10)

entry_label = tk.Label(root, text="Enter Stock Ticker or Company Name:")
entry_label.pack()

entry = tk.Entry(root, width=30, font=("Helvetica", 14))
entry.pack(pady=5)
entry.bind("<Return>", lambda event: fetch_stock_data())

fetch_button = tk.Button(root, text="Fetch Data", command=fetch_stock_data, bg="blue", fg="white")
fetch_button.pack(pady=10)

result_label = tk.Label(root, text="Stock data will appear here...", justify="left", font=("Helvetica", 12), fg="gray")
result_label.pack(pady=10)

# üñºÔ∏è Frame for Chart
chart_frame = tk.Frame(root)
chart_frame.pack(fill="both", expand=True, padx=10, pady=10)

root.mainloop()

